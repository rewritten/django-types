from typing import Any, Iterator, List, Mapping, Optional, Tuple, Generic, TypeVar

# Engine specific template
T = TypeVar('T')

class BaseEngine(Generic[T]):
    name: str = ...
    dirs: List[str] = ...
    app_dirs: bool = ...
    def __init__(self, params: Mapping[str, Any]) -> None: ...
    @property
    def app_dirname(self) -> Optional[str]: ...
    # These actually return engine specific Template objects, not the base.Template.
    def from_string(self, template_code: str) -> T: ...
    def get_template(self, template_name: str) -> T: ...
    @property
    def template_dirs(self) -> Tuple[str]: ...
    def iter_template_filenames(self, template_name: str) -> Iterator[str]: ...
